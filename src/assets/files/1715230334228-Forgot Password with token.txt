
exports.userResetPassword = async (req, res) => {
    let { token, user } = req.body;

    try {
        const { password, confirmPassword } = user;

        if (password !== confirmPassword) {
            return res.status(422).json({ message: "Password and confirm password do not match" });
        }
        const extractedEmail = verifyToken(token);

        if (!extractedEmail) {
            return res.status(422).json({
                message: "Assigned token is missing, try clicking on the exact link from the email",
            });
        }

        const myUser = await User.findOne({ email: extractedEmail });

        if (!myUser) {
            return res.status(422).json({ message: "Email is incorrect" });
        }

        const resetToken = await TokenPasswordReset.findOne({ email: extractedEmail, token });

        if (!resetToken) {
            return res.status(422).json({ message: "Email or Token is incorrect!" });
        }

        if (resetToken.used === true) {
            return res.status(422).json({ message: "Token is already used!" });
        }

        const passwordHash = await bcrypt.hash(password, 10);

        await User.updateOne(
            { _id: myUser._id },
            {
                password: passwordHash,
                updatedAt: Date.now(),  
            }
        );

        await TokenPasswordReset.updateOne(
            { email: extractedEmail, token },
            { used: true }
        );

        res.status(201).json({
            message: "Password Reset Successfully. Thank you",
        });
    } catch (error) {
        console.error(error);
        res.status(400).json({
            error_code: "password_reset",
            message: "error" + error,
        });
    }
};
